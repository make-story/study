console.log('TEST');
/*
핸드폰을 새로 개통한 고객에게 전화번호를 할당해 주어야 합니다.
전화번호는 "123-456" 과 같이 6자리 숫자 중간을 하이픈(-) 하나로 구분한 형태입니다.
고객이 할당받기 희망하는 전화번호 형식이 주어집니다.
희망 전화번호 형식은 "123-4XX" 와 같이 중간을 하이픈(-)하나로 구분한 6자리의 "X" 혹은 0~9 사이의 숫자로 이루어진 형태입니다.
고객에게 할당해 줄 번호는 희망 전화번호 형식와 숫자 자리는 반드시 같아야 하지만, "X" 로 이루어진 자리는 아무 숫자나 할당해 주어도 됩니다.
이미 존재하는 전화번호 목록이 주어집니다. 이미 존재하는 전화번호는 희망 전화번호 형식과 같이, 중간을 하이픈(-) 하나로 구분한 6자리의 "X" 혹은 0~9 사이의 숫자로 이루어진 형태로 주어지며, "X" 로 이루어진 자리를 0~9 사이의 숫자로 대체했을 때 만들어질 수 있는 전화번호들은 이미 존재함을 나타냅니다.

예를 들어, "12X-4X6" 이 이미 존재하는 전화번호라면 "123-456", "126-486","123-406"등의 전화번호가 이미 존재함을 나타냅니다.
고객이 희망 전화번호 형식이 주어질 때, 고객이 희망하는 번호들 중에 이미 존재하는 번호를 제외하고 할당 가능한 번호들을 구하려 합니다.
고객이 할당받기 희망하는 전화번호 형식인 문자열 hope_number 와 이미 존재하는 전화번호 목록을 담은 1차원 문자열 배열 exist_number 가 매개변수로 주어집니다.
이때, 고객에게 할당해줄 수 있는 전화번호를 하이픈(-)을 제거한 숫자가 작은 순서대로 1차원 문자열 배열에 담아 return 하도록 solution 함수를 만들어 주세요.
단, 고객이 희망하는 번호들 중에 할당 가능한 전화번호가 없다면 ["-1"]을 return 해 주세요.

입출력 예
1. hope_number 값이 "123-4XX", exist_number 값이 ["123-XX0", "XXX-4X1", "123-4X2", "123-4X3", 123-4X4", 123-4X5", 123-4X7", 123-4X8", "123-4X9" "123-456", "XXX-X9X"], result 값은 ["123-406", "123-416", "123-426", "123-436", "123-446", "123-466", "123-476", "123-486"] 나와야 합니다.
2. hope_number 값이 "0XX-XXX", exist_number 값이 ["0XX-XX0", "0XX-XX1", "0XX-XX2", "0XX-XX3", "0XX-XX4", "XXX-XX5", "XXX-XX6", "XXX-XX7", "XXX-XX8", "XXX-XX9"], result 는 ["-1"]

고객의 희망 전화번호가 "123-4XX" 라면, "123-4" 시작하고 5번쨰 숫자가 0~9, 6번째 숫자가 0~9 인 100(=10x10)가지 전화번호 중 하나를 희망함을 의미합니다.
["123-XX0", "XXX-4X1", "123-4X2", "123-4X2", "123-4X3", "123-4X4", "123-4X5", "123-4X7", "123-4X8", "123-4X9"] 번호가 이미 존재하므로, "123-4XX" 가 나타내는 전화번호 중 6번째 숫자가 6이 아닌 전화번호는 모두 이미 존재함을 알 수 있습니다. 따라서, 고객에게 할당해줄 수 있는 전화번호의 6번째 숫자는 6뿐입니다.
["123-456", "XXX-X9X"] 번호가 이미 존재하므로, "123-4X6"이 나타내는 전화번호 중 5번째 숫자가 5 또는 9인 전화번호는 이미 존재함을 알 수 있습니다.
따라서, ["123-406", "123-416", "123-426", "123-436", "123-446", "123-466", "123-476", "123-486"]을 return 합니다.

제한사항  
hope_number 는 0~9 사이의 숫자나 X 혹은 '-' 으로 이루어진 길이가 7인 문자열입니다.
4번째 문자는 반드시 '-'입니다.
4번째 문자를 제외한 문자는 0~9 사이의 숫자 혹은 X 입니다.
hope_number 에는 반드시 숫자가 하나 이상 포함됩니다.
*/

/*
어떤 스키장에서 리프트에 손님을 탑승시킬 때, 탑승장에 도착한 시간 뿐만아니라, 손님의 티켓등급도 고려하여 탑승 순서가 정해집니다. 이에 따른 탑승 순서를 다음과 같이 정합니다.

- 리프트는 일정한 시간 간격으로 한 대씩 탑승장으로 들어옵니다.
- 탑승장에 들어오는 순서대로 리프트에 번호를 부여합니다. 첫 번째 리프트부터 0번 리프트 입니다.
- 리프트 한 대에는 한 명의 승객만 탑승합니다.
- 리프트 한 대가 출발하고, 다음 리프트가 도착하기 전까지 탑승장에 도착한 승객은 모두 같은 시각에 도착한 것으로 간주합니다.
- 손님들의 리프트 탑승장 도착 시간은 리프트 번호로 주어집니다.
- 즉, 손님이 리프트 탑승장에 도착한 후 바로 다음으로 탑승장에 들어오는 리프트 번호가 해당 손님이 탑승장에 도착한 시각입니다.
- 기존 탑승장에 대기중인 승객과 현재 도착한 승객 중에서 우선 순위가 가장 높은 탑승자를 선정합니다.
- 티켓 등급이 높을 수록 우선순위가 높으며, 등급이 가장 높은 손님이 여러 명일 경우는 먼저 도착한 순서대로 리프트에 탑승합니다.
- 도착한 시각(리프트 번호)과 등급이 같을 경우에는 아이디 값이 작은 손님이 먼저 탑승합니다.

각 손님의 도착 시각(리프트 번호)을 저장한 배열 t와 그 손님의 등급을 저장한 배열 r이 주어질 때, 탑승하는 손님의 순서를 return 하도록 solution 함수를 만들어 주세요.

입출력 예  
t 값이 [0,1,3,0] 이고, r 값이 [0,1,2,3] 이면, result 값은 [0,1,3,2] 가 출력되어야 합니다. 
t 값이 [7,6,8,1] 이고, r 값이 [0,1,2,3] 이면, result 값은 [3,1,0,2] 가 출력되여야 합니다.

자바스크립트 코드로 만들어주세요.
*/
