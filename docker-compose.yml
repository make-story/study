# 첫 줄에는 파일 규격 버전을 적습니다. 
# 파일의 규격(버전)에 따라 지원하는 옵션이 달라집니다.
version: "3.7" 

# services 항목 밑에 실행하려는 컨테이너들을 정의합니다. 
# 컴포즈에서는 컨테이너 대신 서비스라는 개념을 사용합
services:
  dashboard: # 서비스의 이름 (사용예: $ docker-compose exec <서비스이름> <내부실행명령>)
    container_name: webpagetest # 컨테이너의 이름
    #restart: always # container를 실행할 때 항상 이미 수행중이라면 재시작을 수행합니다.
    build: 
      context: . # docker build 명령을 실행할 디렉터리 경로
      dockerfile: Dockerfile # 빌드하는 데 사용할 Dockerfile을 지정
    # local cache에서 해당 image를 찾아서 없으면 위 dockerfile 이용해서 build
    # image를 적어 놓으면 만들어진 이미지가 해당 이름을 가짐
    image: docker.cjoshopping.com/webpagetest:latest  # goes to youruser DockerHub registry
    #command: # cmd 실행 명령어
    volumes:
      # 일반적으로 docker container는 컨테이너 내부에 데이터를 관리하므로, 컨테이너가 파기되면 데이터가 모두 날라가게 된다.
      # container의 데이터 휘발성 때문에 데이터를 container가 아닌 호스트에 저장할 때,
      # 또는 container끼리 데이터를 공유할 때 Volume를 사용
      # docker-compose.yml 를 이용한 volumes 설정은 상대 경로로 가능 
      # -v <호스트 디렉토리>:<컨테이너 디렉토리> : 로컬 디렉터리의 특정 경로를 컨테이너 내부로 마운트
      # --volumes-from <컨테이너 이름> : -v가 설정된 컨테이너의 볼륨을 같이 공유 (다른 컨테이너에 연결)
      - ".:/app"
      - "/app/node_modules"
    ports: 
      # 연결할 포트
      # <도커 외부에서 접근을 위한 포트>:<도커 내부에서 사용할 포트>
      - "4001:4001"
    environment: 
      # 환경변수 설정
      # -e MONGODB_HOST=mongo
      - NODE_ENV=development
      - MONGODB_HOST=mongo # 몽고DB 컨테이너 이름
      - MONGODB_DB=webpagetest
      - HEADLESS_CONTROL=N
    networks: 
      # 각 컨테이너를 동일한 네트워크 명으로 연결가능하도록 설정
      # 도커 1.9.0 버전부터 네트워크를 생성할 수 있는 기능이 정식으로 추가되었음
      # 이때 네트워크를 생성하고 컨테이너를 연결시키면 해당 네트워크 안에 속한 컨테이너끼리는 서로 접속할 수 있음
      # 추후 --link 옵션은 사라질 예정 (기존 --link 를 통해 컨테이너간 연결 설정)
      - backend
    #links:
      # 컨테이너간 연결 (연동) - 각각의 컨테이너는 Private IP 가 존재, IP를 통해 연결가능하나, Container 의 IP 는 언제든 변할 수 있는 유동적인 성격
      # link를 이용한 Container 연동은, 컨테이너간 IP 가 아닌 컨테이너의 이름을 이용해 통신 가능
      #- mongodb

  mongodb: # 서비스의 이름
    container_name: mongo
    restart: always 
    image: mvertes/alpine-mongo # 사용할 도커 이미지 - hub.docker.com
    #command: --smallfiles
    ports:
      - "27017:27017"
    volumes:
      # volume을 만들어두지 않으면 컨테이너가 매번 종료될 때마다 데이터가 초기화 되므로 따로 볼륨으로 관리 (로컬의 /usr/local/etc/mongod.conf 에 설정된 데이터 저장소 경로확인)
      # $ docker volume ls 명령으로 확인
      # 로컬 디렉터리의 특정 경로를 컨테이너 내부로 마운트
      - mongo:/data/db 
    networks:
      - backend 
      
networks: 
  backend:
    # docker 의 networks default 설정은 bridge 방식
    driver: bridge

volumes: 
  # 볼륨 컨테이너 생성 (볼륨 컨테이너는 말 그대로 데이터를 저장하는 것이 목적인 컨테이너)
  # v3 이상에서는 볼륨 컨테이너로 사용하기 위한 별로 컨테이너를 따로 생성하지 않아도 된다는 장점 (https://joont92.github.io/docker/volume-container-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/)
  # 사용하는 쪽에서 <volume_name>:<mount를 원하는 디렉토리> 의 형태로 지정
  # 볼륨 컨테이너는 충분히 좋은 기능이지만, 그래도 범위가 같은 도커 호스트 안이라는 사실은 변하지 않는다
  mongo: 


# $ docker-compose build # 새로운 변경사항을 반영
# $ docker-compose up # 서비스 실행